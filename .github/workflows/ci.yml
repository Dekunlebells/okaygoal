name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Test Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: okaygoal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Backend Tests
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend linting
        run: |
          cd backend
          npm run lint

      - name: Run backend type checking
        run: |
          cd backend
          npm run type-check

      - name: Run backend tests
        run: |
          cd backend
          npm run test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: okaygoal_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci

      # Frontend Tests
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend type checking
        run: |
          cd frontend
          npm run type-check

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --coverage
        env:
          VITE_API_URL: http://localhost:3001/api/v1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info,./backend/coverage/lcov.info
          fail_ci_if_error: false

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Build Backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-dist
          path: backend/dist/

      # Build Frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3001/api/v1' }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL || 'ws://localhost:3001/ws' }}

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Audit backend dependencies
        run: |
          cd backend
          npm audit --audit-level=high

      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Deploy to Staging (develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-dist
          path: backend/dist/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

      # Deploy Backend to Railway/Render
      - name: Deploy Backend to Staging
        run: |
          echo "Deploying backend to staging..."
          # Add your backend deployment commands here
          # Example for Railway:
          # railway deploy --service backend
          # Example for Render:
          # render deploy --service-id ${{ secrets.RENDER_BACKEND_SERVICE_ID }}

      # Deploy Frontend to Vercel/Netlify
      - name: Deploy Frontend to Staging
        run: |
          echo "Deploying frontend to staging..."
          # Add your frontend deployment commands here
          # Example for Vercel:
          # vercel deploy --token ${{ secrets.VERCEL_TOKEN }} frontend/dist
          # Example for Netlify:
          # netlify deploy --dir frontend/dist --site ${{ secrets.NETLIFY_SITE_ID }} --auth ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Deploy to Production (main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-dist
          path: backend/dist/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

      # Deploy Backend to Production
      - name: Deploy Backend to Production
        run: |
          echo "Deploying backend to production..."
          # Add your production backend deployment commands here

      # Deploy Frontend to Production
      - name: Deploy Frontend to Production
        run: |
          echo "Deploying frontend to production..."
          # Add your production frontend deployment commands here

      # Post-deployment health checks
      - name: Health Check
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1

  # Notify on deployment
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow